#Подключение модуля содержащего математические функции
import math

#функция суммирования чисел
def sum_primes(nums):
    #функция проверки числа на простоту
    def is_prime(num):
        #переменная для хранения результата проверки
        result = True
        
        #алгоритм проверки действует следующим образом если чило чётное или равно 1 то оно составное и результат функции равен False 
        #иначе если число равно 2 или если нет ни одного нечётного делителя в диапазоне от 3 до корня числа то число простое и результат функции равен True
        
        if num != 2:
            if num == 1 or num % 2 == 0:
                result = False
            else:
                #переменная в которой храниться корень числа округлённый в большую сторону и преобразованный в целое
                sqrtNum = int(math.ceil(math.sqrt(num)))
                
                #цикл проходящий все нечётные числа от 3 до корня числа, функция range(a, b, c) генерирует список начиная с "a" до "b" с щагом "c"
                #так как нужно чтобы и сам корень проверялся на делимость с числом если он получился нечётный то к нему прибавляется 1 для того чтобы он попал под условие генерируемого списка
                for i in range(3, sqrtNum+1, 2):
                    #условие проверяющее делится ли нацело число на текущее число цикла, и если делиться то переменной "result" присваивается значение False и цикл прекращается
                    if num % i == 0:
                        result = False
                        break
                
        return result

    #переменная для хранения промежуточной суммы простых чисел списка
    result = 0
    
    #цикл проходящий по всем элементам списка
    for i in nums:
        #условие проверяющее простое ли чило, и если простое то оно суммируется с промежуточной суммой
        if is_prime(i):
            result += i
    
    return result


print(sum_primes([1, 2, 3, 1, 5, 1, 7, 1, 9, 10]))

print(sum_primes([2, 3, 4, 11, 20, 50, 71]))

print(sum_primes([]))

